openapi: 3.0.3
info:
  title: LogosLMS Platform API
  description: Multi-tenant Learning Management System with AI coaching and gamification
  version: 1.0.0
  contact:
    name: LogosLMS Team
    email: support@logoslms.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-generated: 2025-10-18

servers:
  - url: https://api.logoslms.com/v1
    description: Production server
  - url: https://staging-api.logoslms.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []
  - OrganizationAuth: []

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
        '409':
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate user session
      responses:
        '200':
          description: Logout successful

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get current authenticated user information
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

  # Organization management (super-admin only)
  /organizations:
    get:
      tags:
        - Organizations
      summary: List organizations
      description: Get list of all organizations (super-admin only)
      responses:
        '200':
          description: Organizations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationResponse'
        '403':
          description: Forbidden - super-admin required

    post:
      tags:
        - Organizations
      summary: Create organization
      description: Create new organization (super-admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Invalid request data
        '403':
          description: Forbidden - super-admin required

  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization
      description: Get organization details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found

    put:
      tags:
        - Organizations
      summary: Update organization
      description: Update organization details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found

  # User invitation and management
  /organizations/{id}/invite:
    post:
      tags:
        - Users
      summary: Invite user to organization
      description: Send invitation email to user via Resend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
      responses:
        '201':
          description: Invitation sent via Resend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '400':
          description: Invalid request data
        '429':
          description: Rate limit exceeded for email sending

  /organizations/{id}/users:
    get:
      tags:
        - Users
      summary: List organization users
      description: Get list of users in organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

  /users/{id}/profile:
    put:
      tags:
        - Users
      summary: Update user profile
      description: Update user profile information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}/password:
    put:
      tags:
        - Users
      summary: Change user password
      description: Change user password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed
        '400':
          description: Invalid request data

  # Course and content management
  /courses:
    get:
      tags:
        - Courses
      summary: List courses
      description: Get list of courses in organization
      responses:
        '200':
          description: Courses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'

    post:
      tags:
        - Courses
      summary: Create course
      description: Create new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get course
      description: Get course details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'

    put:
      tags:
        - Courses
      summary: Update course
      description: Update course details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'

    delete:
      tags:
        - Courses
      summary: Delete course
      description: Delete course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Course deleted

  # AI coaching endpoints
  /ai/coach/analyze:
    post:
      tags:
        - AI Coaching
      summary: Analyze learning progress
      description: Analyze learner's progress and provide insights
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoachingAnalysisRequest'
      responses:
        '200':
          description: Analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoachingAnalysisResponse'

  /ai/coach/suggest:
    post:
      tags:
        - AI Coaching
      summary: Get learning suggestions
      description: Get personalized learning suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoachingSuggestionRequest'
      responses:
        '200':
          description: Suggestions generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoachingSuggestionResponse'

  /ai/content/generate:
    post:
      tags:
        - AI Content
      summary: Generate content
      description: Generate AI content for courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentGenerationRequest'
      responses:
        '200':
          description: Content generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGenerationResponse'

  /ai/content/{id}/approve:
    post:
      tags:
        - AI Content
      summary: Approve AI content
      description: Approve AI-generated content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Content approved

  /ai/content/{id}/reject:
    post:
      tags:
        - AI Content
      summary: Reject AI content
      description: Reject AI-generated content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectContentRequest'
      responses:
        '200':
          description: Content rejected

  # Motivation system endpoints
  /motivation/leaderboard:
    get:
      tags:
        - Motivation
      summary: Get leaderboard
      description: Get organization leaderboard
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'

  /motivation/badges:
    get:
      tags:
        - Motivation
      summary: Get badges
      description: Get available badges
      responses:
        '200':
          description: Badges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadgeResponse'

  /motivation/points:
    post:
      tags:
        - Motivation
      summary: Award points
      description: Award points to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardPointsRequest'
      responses:
        '200':
          description: Points awarded

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OrganizationAuth:
      type: apiKey
      in: header
      name: X-Organization-ID

  schemas:
    # Authentication schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - organizationId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        organizationId:
          type: string
          format: uuid

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        token:
          type: string
        organizationId:
          type: string
          format: uuid

    # User schemas
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [super_admin, org_admin, mentor, learner]
        organizationId:
          type: string
          format: uuid
        profileData:
          type: object
        points:
          type: integer
        level:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        profileData:
          type: object

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 8

    # Organization schemas
    OrganizationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        brandingConfig:
          type: object
        themeConfig:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateOrganizationRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
        slug:
          type: string
        brandingConfig:
          type: object
        themeConfig:
          type: object

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        brandingConfig:
          type: object
        themeConfig:
          type: object

    # User invitation schemas
    InviteUserRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [org_admin, mentor, learner]

    InvitationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
        status:
          type: string
          enum: [pending, accepted, expired]

    # Course schemas
    CourseResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        content:
          type: object
        status:
          type: string
          enum: [draft, published, archived]
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCourseRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        content:
          type: object

    UpdateCourseRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        content:
          type: object
        status:
          type: string
          enum: [draft, published, archived]

    # AI coaching schemas
    CoachingAnalysisRequest:
      type: object
      required:
        - userId
        - courseId
      properties:
        userId:
          type: string
          format: uuid
        courseId:
          type: string
          format: uuid

    CoachingAnalysisResponse:
      type: object
      properties:
        progress:
          type: number
        strengths:
          type: array
          items:
            type: string
        weaknesses:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    CoachingSuggestionRequest:
      type: object
      required:
        - userId
        - courseId
        - question
      properties:
        userId:
          type: string
          format: uuid
        courseId:
          type: string
          format: uuid
        question:
          type: string
        learningStyle:
          type: string
          enum: [visual, auditory, kinesthetic, reading]

    CoachingSuggestionResponse:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: string

    # AI content schemas
    ContentGenerationRequest:
      type: object
      required:
        - type
        - topic
        - difficulty
      properties:
        type:
          type: string
          enum: [lesson, quiz, assignment, explanation]
        topic:
          type: string
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
        context:
          type: string

    ContentGenerationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: object
        status:
          type: string
          enum: [pending, approved, rejected]

    RejectContentRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string

    # Motivation schemas
    LeaderboardResponse:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                format: uuid
              name:
                type: string
              points:
                type: integer
              level:
                type: integer

    BadgeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        pointsRequired:
          type: integer
        level:
          type: integer

    AwardPointsRequest:
      type: object
      required:
        - userId
        - points
        - reason
      properties:
        userId:
          type: string
          format: uuid
        points:
          type: integer
        reason:
          type: string

    # Error schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
