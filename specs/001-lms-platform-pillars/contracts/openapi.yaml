openapi: 3.0.3
info:
  title: LogosLMS API
  description: Multi-tenant Learning Management System for Christian Education Organizations
  version: 1.0.0
  contact:
    name: LogosLMS Team
    email: support@logoslms.com
servers:
  - url: https://api.logoslms.com/v1
    description: Production server
  - url: https://staging-api.logoslms.com/v1
    description: Staging server

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '200':
          description: Logout successful

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Organization management (super-admin only)
  /organizations:
    get:
      tags: [Organizations]
      summary: List all organizations (super-admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags: [Organizations]
      summary: Create new organization (super-admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /organizations/{id}:
    get:
      tags: [Organizations]
      summary: Get organization by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Organizations]
      summary: Update organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # User invitation and management
  /organizations/{id}/invite:
    post:
      tags: [Users]
      summary: Invite user to organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
      responses:
        '201':
          description: User invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /organizations/{id}/users:
    get:
      tags: [Users]
      summary: List organization users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of organization users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}/profile:
    put:
      tags: [Users]
      summary: Update user profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/password:
    put:
      tags: [Users]
      summary: Update user password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # Course and content management
  /courses:
    get:
      tags: [Courses]
      summary: List courses
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    post:
      tags: [Courses]
      summary: Create new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequest'

  /courses/{id}:
    get:
      tags: [Courses]
      summary: Get course by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Courses]
      summary: Update course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Courses]
      summary: Delete course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Course deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # AI coaching endpoints
  /ai/coach/analyze:
    post:
      tags: [AI]
      summary: Analyze learner progress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIAnalyzeRequest'
      responses:
        '200':
          description: Analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIAnalyzeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /ai/coach/suggest:
    post:
      tags: [AI]
      summary: Get learning suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AISuggestRequest'
      responses:
        '200':
          description: Suggestions generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AISuggestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /ai/content/generate:
    post:
      tags: [AI]
      summary: Generate AI content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIGenerateRequest'
      responses:
        '201':
          description: Content generated and pending approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIContent'
        '400':
          $ref: '#/components/responses/BadRequest'

  /ai/content/{id}/approve:
    post:
      tags: [AI]
      summary: Approve AI content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Content approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIContent'
        '404':
          $ref: '#/components/responses/NotFound'

  /ai/content/{id}/reject:
    post:
      tags: [AI]
      summary: Reject AI content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRejectRequest'
      responses:
        '200':
          description: Content rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIContent'
        '404':
          $ref: '#/components/responses/NotFound'

  # Motivation system endpoints
  /motivation/leaderboard:
    get:
      tags: [Motivation]
      summary: Get organization leaderboard
      responses:
        '200':
          description: Leaderboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaderboard'

  /motivation/badges:
    get:
      tags: [Motivation]
      summary: Get available badges
      responses:
        '200':
          description: List of badges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'

  /motivation/points:
    post:
      tags: [Motivation]
      summary: Award points to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardPointsRequest'
      responses:
        '200':
          description: Points awarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    RegisterRequest:
      type: object
      required: [email, password, role]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum: [org_admin, mentor, learner]
        profile_data:
          type: object

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        expires_at:
          type: string
          format: date-time

    # Core entity schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        organization_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [super_admin, org_admin, mentor, learner]
        profile_data:
          type: object
        points:
          type: integer
          minimum: 0
        level:
          type: integer
          minimum: 1
          maximum: 10
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        branding_config:
          type: object
        theme_config:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        content:
          type: object
        created_by:
          type: string
          format: uuid
        status:
          type: string
          enum: [draft, published, archived]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Request/Response schemas
    CreateOrganizationRequest:
      type: object
      required: [name, slug]
      properties:
        name:
          type: string
        slug:
          type: string
        branding_config:
          type: object
        theme_config:
          type: object

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        branding_config:
          type: object
        theme_config:
          type: object

    InviteUserRequest:
      type: object
      required: [email, role]
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [org_admin, mentor, learner]

    UpdateProfileRequest:
      type: object
      properties:
        profile_data:
          type: object

    UpdatePasswordRequest:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8

    CreateCourseRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
        description:
          type: string
        content:
          type: object

    UpdateCourseRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        content:
          type: object
        status:
          type: string
          enum: [draft, published, archived]

    # AI schemas
    AIAnalyzeRequest:
      type: object
      required: [user_id, course_id]
      properties:
        user_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid

    AIAnalyzeResponse:
      type: object
      properties:
        analysis:
          type: string
        recommendations:
          type: array
          items:
            type: string

    AISuggestRequest:
      type: object
      required: [user_id, context]
      properties:
        user_id:
          type: string
          format: uuid
        context:
          type: string

    AISuggestResponse:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: string

    AIGenerateRequest:
      type: object
      required: [content_type, prompt]
      properties:
        content_type:
          type: string
          enum: [lesson, quiz, course_description]
        prompt:
          type: string
        course_id:
          type: string
          format: uuid

    AIContent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        content_type:
          type: string
        content_data:
          type: object
        status:
          type: string
          enum: [pending, approved, rejected]
        created_at:
          type: string
          format: date-time

    AIRejectRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string

    # Motivation system schemas
    Leaderboard:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              name:
                type: string
              points:
                type: integer
              level:
                type: integer

    Badge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        icon_url:
          type: string
        level:
          type: integer
          minimum: 1
          maximum: 10

    AwardPointsRequest:
      type: object
      required: [user_id, points, reason]
      properties:
        user_id:
          type: string
          format: uuid
        points:
          type: integer
          minimum: 1
        reason:
          type: string

    # Error schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'