openapi: 3.0.3
info:
  title: LogosLMS API
  description: Multi-tenant Learning Management System API
  version: 1.0.0
  contact:
    name: LogosLMS Team
    email: support@logoslms.com

servers:
  - url: https://api.logoslms.com/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
        '409':
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get current authenticated user information
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Organization Management (Super Admin)
  /organizations:
    get:
      tags:
        - Organizations
      summary: List organizations
      description: Get list of all organizations (super admin only)
      responses:
        '200':
          description: Organizations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      tags:
        - Organizations
      summary: Create organization
      description: Create a new organization (super admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization
      description: Get organization details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      tags:
        - Organizations
      summary: Update organization
      description: Update organization details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  # User Management
  /organizations/{id}/users:
    get:
      tags:
        - Users
      summary: List organization users
      description: Get users in organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /organizations/{id}/invite:
    post:
      tags:
        - Users
      summary: Invite user to organization
      description: Send invitation email to user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
      responses:
        '201':
          description: Invitation sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'

  /users/{id}/profile:
    put:
      tags:
        - Users
      summary: Update user profile
      description: Update user profile information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Course Management
  /courses:
    get:
      tags:
        - Courses
      summary: List courses
      description: Get courses in current organization
      responses:
        '200':
          description: Courses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
        - Courses
      summary: Create course
      description: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get course
      description: Get course details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    put:
      tags:
        - Courses
      summary: Update course
      description: Update course details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  # Enrollment Management
  /courses/{id}/enroll:
    post:
      tags:
        - Enrollments
      summary: Enroll in course
      description: Enroll current user in course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Enrollment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'

  /enrollments:
    get:
      tags:
        - Enrollments
      summary: List user enrollments
      description: Get current user's enrollments
      responses:
        '200':
          description: Enrollments retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'

  # AI Coaching
  /ai/coach/analyze:
    post:
      tags:
        - AI Coaching
      summary: Analyze learning progress
      description: Get AI analysis of user's learning progress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeProgressRequest'
      responses:
        '200':
          description: Analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressAnalysis'

  /ai/coach/suggest:
    post:
      tags:
        - AI Coaching
      summary: Get learning suggestions
      description: Get personalized learning suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestRequest'
      responses:
        '200':
          description: Suggestions generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningSuggestions'

  # Gamification
  /gamification/leaderboard:
    get:
      tags:
        - Gamification
      summary: Get leaderboard
      description: Get organization leaderboard
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaderboard'

  /gamification/badges:
    get:
      tags:
        - Gamification
      summary: Get user badges
      description: Get current user's badges
      responses:
        '200':
          description: Badges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string
          minLength: 2
          maxLength: 100

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        refreshToken:
          type: string

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        organization_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [super_admin, org_admin, mentor, learner]
        profile_data:
          type: object
          properties:
            name:
              type: string
            avatar:
              type: string
              format: uri
        points:
          type: integer
          minimum: 0
        level:
          type: integer
          minimum: 1
          maximum: 10
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Organization Schemas
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        domain:
          type: string
        branding_config:
          type: object
        theme_config:
          type: object
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateOrganizationRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        slug:
          type: string
          minLength: 3
          maxLength: 50
        domain:
          type: string
        branding_config:
          type: object
        theme_config:
          type: object

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        branding_config:
          type: object
        theme_config:
          type: object
        settings:
          type: object

    # Course Schemas
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        content:
          type: object
        status:
          type: string
          enum: [draft, published, archived]
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateCourseRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        content:
          type: object

    UpdateCourseRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        content:
          type: object
        status:
          type: string
          enum: [draft, published, archived]

    # Enrollment Schemas
    Enrollment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        enrolled_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        progress:
          type: object

    # Invitation Schemas
    InviteUserRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [org_admin, mentor, learner]

    Invitation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
        token:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    # AI Coaching Schemas
    AnalyzeProgressRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid

    ProgressAnalysis:
      type: object
      properties:
        strengths:
          type: array
          items:
            type: string
        weaknesses:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string
        confidence_score:
          type: number
          minimum: 0
          maximum: 1

    SuggestRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          format: uuid
        context:
          type: string

    LearningSuggestions:
      type: object
      properties:
        next_lessons:
          type: array
          items:
            type: string
        study_techniques:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: string

    # Gamification Schemas
    Leaderboard:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              name:
                type: string
              points:
                type: integer
              level:
                type: integer
              rank:
                type: integer

    Badge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        earned_at:
          type: string
          format: date-time

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
